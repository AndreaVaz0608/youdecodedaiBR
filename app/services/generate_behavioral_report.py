import os
import openai
import logging

# ‚úÖ Prompt builder com estrutura EXATA e espa√ßamento corrigido
def generate_behavior_prompt(profile_combination: dict, name: str = "voc√™") -> str:
    mbti = profile_combination.get("mbti")
    disc = profile_combination.get("disc")
    enneagram = profile_combination.get("eneagrama")

    prompt = f"""
Voc√™ √© um(a) analista comportamental com profundo conhecimento em MBTI, DISC e Eneagrama. Sua tarefa √© gerar um relat√≥rio detalhado, estruturado e altamente personalizado com base na seguinte combina√ß√£o de perfis:

- MBTI: {mbti}
- DISC: {disc}
- Eneagrama: {enneagram}

Use a estrutura abaixo com os t√≠tulos de se√ß√£o e emojis exatamente como apresentado. Seja emp√°tico(a), perspicaz, humano(a) e direto(a). Evite clich√™s e repeti√ß√µes. Escreva em um tom conversacional, inspirador e acess√≠vel.

üåü 1. INTRODU√á√ÉO PERSONALIZADA  
Bem-vindo(a), {name}! Este relat√≥rio personalizado foi criado para oferecer insights profundos sobre seu comportamento, motiva√ß√µes e estilo de tomada de decis√£o. Utilizando as teorias do MBTI, DISC e do Eneagrama, ele √© uma explora√ß√£o sobre quem voc√™ √© e como se relaciona com o mundo. Esperamos que isso o(a) motive a usar seus pontos fortes, reconhecer seus pontos cegos e crescer pessoal e profissionalmente.

üéØ 2. SEU PERFIL EM UMA FRASE PODEROSA  
(Resuma a ess√™ncia dessa personalidade em uma frase impactante e precisa.)

üîç 3. SUA PERSONALIDADE EM PROFUNDIDADE

üß† Como Voc√™ Pensa (MBTI ‚Äì {mbti})  
(Descreva como a pessoa processa informa√ß√µes, toma decis√µes e organiza ideias.)

‚ö° Como Voc√™ Age e Interage (DISC ‚Äì {disc})  
(Descreva o estilo de a√ß√£o, comunica√ß√£o e influ√™ncia.)

‚ù§Ô∏è Seus Motivadores Internos (Eneagrama Tipo {enneagram})  
(Destaque motiva√ß√µes principais, valores e tend√™ncias emocionais.)

üöÄ 4. SEUS PONTOS FORTES √öNICOS  
(Listar talentos principais, comportamentos naturais e qualidades marcantes.)

‚ö†Ô∏è 5. PONTOS DE ATEN√á√ÉO  
(Listar desafios potenciais, padr√µes r√≠gidos ou comportamentos que exigem aten√ß√£o.)

üí° 6. DICAS PR√ÅTICAS PARA EVOLUIR  
(Compartilhe conselhos pr√°ticos que ajudem na jornada de crescimento.)

üîÆ 7. SEU POTENCIAL DE FUTURO  
(Pinte um quadro inspirador sobre o que a pessoa pode alcan√ßar ao viver seu melhor potencial.)

üôå 8. ENCERRAMENTO INSPIRADOR  
(Encerre com palavras motivadoras e incentivo ao autodesenvolvimento.)

No final, inclua isso com formata√ß√£o em negrito (markdown):

**Perfis Identificados**  
‚Ä¢ MBTI: {mbti}  
‚Ä¢ DISC: {disc}  
‚Ä¢ Eneagrama: {enneagram}
"""
    return prompt.strip()


# ‚úÖ Fun√ß√£o principal de gera√ß√£o do relat√≥rio
def generate_behavioral_report(mbti: str, disc: str, enneagram: str, name: str = "voc√™") -> tuple:
    logging.warning("‚ö†Ô∏è [DEPRECATED] generate_behavioral_report() est√° obsoleta. Use perfil_service.py como fonte √∫nica de verdade.")
    
    profile_combination = {
        "mbti": mbti,
        "disc": disc,
        "eneagrama": enneagram
    }
    prompt = generate_behavior_prompt(profile_combination, name)

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise Exception("OPENAI_API_KEY n√£o est√° configurada nas vari√°veis de ambiente.")

    openai.api_key = api_key

    try:
        logging.info(f"[generate_behavioral_report] Prompt:\n{prompt}")

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Voc√™ √© um(a) especialista em an√°lise comportamental."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.85,
            max_tokens=1600
        )

        result = response["choices"][0]["message"]["content"]
        logging.info(f"[generate_behavioral_report] Resultado:\n{result}")
        return prompt, result

    except Exception as e:
        logging.error(f"[generate_behavioral_report] Erro ao chamar a OpenAI: {str(e)}")
        raise Exception(f"Erro ao chamar a OpenAI: {str(e)}")
